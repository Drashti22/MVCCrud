@model MvcPractical.Models.User

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm("Edit", "Users", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>User</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div class="form-group mt-2">
            @Html.LabelFor(model => model.FirstName, "First Name", htmlAttributes: new { @class = "control-label" })
            <span class="text-danger">*</span>
            <div class="col-md-10 mt-1">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group mt-2">
            @Html.LabelFor(model => model.LastName, "Last Name", htmlAttributes: new { @class = "control-label" })
            <span class="text-danger">*</span>
            <div class="col-md-10 mt-1">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group mt-2">
            @Html.LabelFor(model => model.Email, "Email", htmlAttributes: new { @class = "control-label" })
            <span class="text-danger">*</span>
            <div class="col-md-10 mt-1">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group mt-2">
            @Html.LabelFor(model => model.MobileNo, "Mobile No", htmlAttributes: new { @class = "control-label" })
            <span class="text-danger">*</span>
            <div class="col-md-10 mt-1">
                @Html.EditorFor(model => model.MobileNo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group mt-2">
            @Html.LabelFor(model => model.Gender, "Gender", htmlAttributes: new { @class = "control-label" })
            <span class="text-danger">*</span>
            <div class="col-md-10 mt-1">
                <div class="form-check">
                    @Html.RadioButtonFor(model => model.Gender, "Male", new { @class = "form-check-input", id = "genderMale" })
                    @Html.Label("genderMale", "Male", htmlAttributes: new { @class = "form-check-label" })
                </div>
                <div class="form-check">
                    @Html.RadioButtonFor(model => model.Gender, "Female", new { @class = "form-check-input", id = "genderFemale" })
                    @Html.Label("genderFemale", "Female", htmlAttributes: new { @class = "form-check-label" })
                </div>
                <div class="form-check">
                    @Html.RadioButtonFor(model => model.Gender, "Other", new { @class = "form-check-input", id = "genderOther" })
                    @Html.Label("genderOther", "Other", htmlAttributes: new { @class = "form-check-label" })
                </div>
                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group mt-2">
            @Html.LabelFor(model => model.CountryId, "Country", htmlAttributes: new { @class = "control-label" })
            <span class="text-danger">*</span>
            <div class="col-md-10 mt-1">
                @Html.DropDownList("CountryId", (IEnumerable<SelectListItem>)ViewBag.CountryList, htmlAttributes: new { @class = "form-control", @id = "countryId" })
                @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group mt-2">
            @Html.LabelFor(model => model.StateId, "State", htmlAttributes: new { @class = "control-label" })
            <span class="text-danger">*</span>
            <div class="col-md-10 mt-1">
                @Html.DropDownList("StateId", (IEnumerable<SelectListItem>)ViewBag.StateList, htmlAttributes: new { @class = "form-control", @id = "stateId" })
                @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group mt-2">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label" })
            <span class="text-danger">*</span>
            <div class="col-md-10 mt-1">
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group mt-2">
            @Html.LabelFor(model => model.KnownLanguage, "Known Language", htmlAttributes: new { @class = "control-label" })
                <div class="col-md-10 mt-1">
                    <input type="hidden" id="KnownLanguage" name="KnownLanguage" value="@Model.KnownLanguage" />
                    @foreach (var language in ViewBag.KnownLanguages as IEnumerable<SelectListItem>)
                    {
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input known-language-checkbox" value="@language.Value"
                                   @(Model.KnownLanguage != null && Model.KnownLanguage.Split(',').Select(l => l.Trim()).Contains(language.Value) ? "checked" : "") />
                            @Html.Label(language.Value, language.Text, new { @class = "form-check-label" })
                        </div>
                    }
                    @Html.ValidationMessageFor(model => model.KnownLanguage, "", new { @class = "text-danger" })
                </div>
        </div>

        <div class="form-group mt-2">
            @Html.LabelFor(model => model.PhotoUrl, "Photo", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 mt-1">
                <input type="file" name="ImageFile" class="form-control" id="photoInput" accept=".jpg, .jpeg, .png" />

                @if (!string.IsNullOrEmpty(Model.PhotoUrl))
                {
                    @Html.HiddenFor(m => m.PhotoUrl)
                    <div class="mt-2">
                        <img src="@Url.Content(Model.PhotoUrl)" alt="Uploaded Photo" style="max-height: 150px;" class="photoPreview" />
                    </div>
                }
                else
                {
                    <img src="~/Uploads/No photo.png" alt="Default Photo" class="img-thumbnail mt-2 photoPreview" style="width: 100px; height: auto;" />
                }
                <span class="text-danger" id="photoError">@Html.ValidationMessageFor(model => model.PhotoUrl, "", new { @class = "text-danger" })</span>

            </div>
        </div>

        <div class="form-group mt-2">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-outline-secondary" />
            </div>
        </div>
    </div>
}

<div class="mt-2 btn btn-outline-primary"
     onmouseover="this.querySelector('a').style.color='white';"
     onmouseout="this.querySelector('a').style.color='inherit';">
    @Html.ActionLink("User List", "Index", null, new { @class = "text-decoration-none", style = "color: inherit;" })
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#countryId').prepend($('<option>', {
                value: '-1',
                text: 'Select Country',
                disabled: true,
                selected: false
            }));
            $('#countryId').on('change', function () {
                var countryId = $(this).val();
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetStatesByCountryId", "Users")',
                    data: { countryId: countryId },
                    success: function (data) {
                        $('#stateId').empty();
                        $('#stateId').append($('<option>', {
                            value: '',
                            text: 'Select State',
                            disabled: true,
                            selected: true
                        }));

                        $.each(data, function (index, item) {
                            $('#stateId').append($('<option>', { value: item.Value, text: item.Text }));
                        });
                    }
                });
            });

            var selectedCountryId = $('#countryId').val();
            if (selectedCountryId) {
                var selectedStateId = '@Model.StateId';
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetStatesByCountryId", "Users")',
                    data: { countryId: selectedCountryId },
                    success: function (data) {
                        $('#stateId').empty();
                        $('#stateId').append($('<option>', {
                            value: null,
                            text: 'Select State',
                            disabled: true,
                            selected: true
                        }));
                        $.each(data, function (index, item) {
                            $('#stateId').append($('<option>', { value: item.Value, text: item.Text }));
                        });

                        // Set the preselected state
                        $('#stateId').val(selectedStateId);
                    }
                });
            }

            // Known languages checkboxes
            $('.known-language-checkbox').change(function () {
                var selectedLanguages = [];
                $('.known-language-checkbox:checked').each(function () {
                    selectedLanguages.push($(this).val());
                });
                $('#KnownLanguage').val(selectedLanguages.join(', '));
            });

            $('#photoInput').on('change', function () {
                var file = this.files[0];
                if (file) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $('.photoPreview').attr('src', e.target.result);
                    };
                    reader.readAsDataURL(file);
                    $('#photoError').html('');
                }
            });
            // Clear validation messages on input change
            $('input, select').on('input change', function () {
                var $this = $(this);
                var fieldName = $this.attr('name');
                $this.siblings('.text-danger').html('');
            });

            $('form').submit(function (e) {
                var isValid = true;

                $('form').find('.form-control, .form-check-input').not('#photoInput').each(function () {
                    var $this = $(this);
                    if (!$this.val()) {
                        isValid = false;
                        $this.siblings('.text-danger').html('This field is required.');
                    }
                });
            
                var photoInput = $('#photoInput')[0].files.length;

                if (photoInput === 0 && '@Model.PhotoUrl' === '') {
                    $('#photoError').html('Photo is required.');
                    e.preventDefault();
                }
                else {
                    $('#photoError').html('');
                }
                if (!isValid) {
                    e.preventDefault();
                }
            });

             if ('@Model.PhotoUrl' != '')
             {
                 $('#PhotoUrl').val('@Model.PhotoUrl');

             }
        });
    </script>
}
